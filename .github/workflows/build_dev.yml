name: OpenWinch CI

on:
  pull_request:

env:
  BUILD_TYPE: Debug

jobs:
  openwinch-amd64:
    name: OpenWinch - Emulator (amd64)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install extra package
      run: |
        sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
        sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0xAB17C654
        sudo apt-get update
        sudo apt-get install python3-vcstool libsdl2-dev cppcheck lcov gcovr curl
    - name: Add external libraries
      run: |
        vcs import ${GITHUB_WORKSPACE}/lib/ < ${GITHUB_WORKSPACE}/openwinch.repos
        cp -r ${GITHUB_WORKSPACE}/cmake/extra/* ${GITHUB_WORKSPACE}/lib
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake ${GITHUB_WORKSPACE} -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build .
    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest --output-on-failure
    - name: Report Coverage
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        make ctest_coverage_lcov
        bash <(curl -s https://codecov.io/bash) -f ctest_coverage_lcov.info || echo "Codecov did not collect coverage reports"
    - name: Make Package
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cpack
    - name: Upload Artifact (All)
      uses: actions/upload-artifact@v2
      with:
        name: Packages-All (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Upload Artifact (build)
      uses: actions/upload-artifact@v2
      with:
        name: Packages-amd64 (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb


  openwinch-armhf:
    name: OpenWinch - RaspberryPI (armhf)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install extra package
      run: |
        sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
        sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0xAB17C654
        sudo apt-get update
        sudo apt-get install python3-vcstool libsdl2-dev cppcheck lcov gcovr gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
    - name: Add external libraries
      run: |
        vcs import ${GITHUB_WORKSPACE}/lib/ < ${GITHUB_WORKSPACE}/openwinch.repos
        cp -r ${GITHUB_WORKSPACE}/cmake/extra/* ${GITHUB_WORKSPACE}/lib
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake ${GITHUB_WORKSPACE} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/cmake/platforms/arm-gnueabihf.toolchain.cmake
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build .
    - name: Make Package
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cpack
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Packages-All (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Upload Artifact (build)
      uses: actions/upload-artifact@v2
      with:
        name: Packages-armhf (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb

  openwinch-arm64:
    name: OpenWinch - RaspberryPI4 (arm64)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install extra package
      run: |
        sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
        sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0xAB17C654
        sudo apt-get update
        sudo apt-get install python3-vcstool libsdl2-dev cppcheck lcov gcovr gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
    - name: Add external libraries
      run: |
        vcs import ${GITHUB_WORKSPACE}/lib/ < ${GITHUB_WORKSPACE}/openwinch.repos
        cp -r ${GITHUB_WORKSPACE}/cmake/extra/* ${GITHUB_WORKSPACE}/lib
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake ${GITHUB_WORKSPACE} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/cmake/platforms/arm-gnuaarch64.toolchain.cmake
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build .
    - name: Make Package
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cpack
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Packages-All (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Upload Artifact (build)
      uses: actions/upload-artifact@v2
      with:
        name: Packages-arm64 (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
