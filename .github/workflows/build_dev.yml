name: OpenWinch CI

on:
  pull_request:

jobs:
  openwinch-amd64:
    name: OpenWinch - Emulator (x86_64)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install extra package
      run: |
        sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
        sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0xAB17C654
        sudo apt-get update
        sudo apt-get install python3-vcstool libsdl2-dev cppcheck
    - name: Add external libraries
      run: |
        vcs import ${GITHUB_WORKSPACE}/lib/ < ${GITHUB_WORKSPACE}/openwinch.repos
        cp -r ${GITHUB_WORKSPACE}/cmake/extra/* ${GITHUB_WORKSPACE}/lib
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE

  # openwinch-armhf:
  #   name: OpenWinch - RaspberryPI (armhf)
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install extra package
  #     run: |
  #       sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
  #       sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0xAB17C654
  #       sudo apt-get update
  #       sudo apt-get install python3-vcstool libsdl2-dev cppcheck
  #   - name: Add external libraries
  #     run: |
  #       vcs import ${GITHUB_WORKSPACE}/lib/ < ${GITHUB_WORKSPACE}/openwinch.repos
  #       cp -r ${GITHUB_WORKSPACE}/cmake/extra/* ${GITHUB_WORKSPACE}/lib
  #   - name: Create Build Environment
  #     run: cmake -E make_directory ${{runner.workspace}}/build
  #   - name: Configure CMake
  #     shell: bash
  #     working-directory: ${{runner.workspace}}/build
  #     run: cmake $GITHUB_WORKSPACE -DCMAKE_TOOLCHAIN_FILE=../../../cmake/platforms/arm-gnueabi.toolchain.cmake
  #   - name: Build
  #     working-directory: ${{runner.workspace}}/build
  #     shell: bash
  #     run: cmake --build . --config $BUILD_TYPE
  #   - name: Test
  #     working-directory: ${{runner.workspace}}/build
  #     shell: bash
  #     run: ctest -C $BUILD_TYPE

