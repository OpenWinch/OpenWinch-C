name: OpenWinch Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10


jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: OpenWinch ${{ github.ref }}
          body: |
            # RELEASE NOTES...
            ## Changelog
            //TODO
          draft: true
          prerelease: false

  openwinch-amd64:
    name: OpenWinch - Emulator (amd64)
    needs: create_release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install extra package
      run: |
        sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
        sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0xAB17C654
        sudo apt-get update
        sudo apt-get install python3-vcstool libsdl2-dev cppcheck googletest
        cd /usr/src/googletest/
        sudo mkdir build
        cd build
        sudo cmake ..
        sudo make
        sudo make install
    - name: Add external libraries
      run: |
        vcs import ${GITHUB_WORKSPACE}/lib/ < ${GITHUB_WORKSPACE}/openwinch.repos
        cp -r ${GITHUB_WORKSPACE}/cmake/extra/* ${GITHUB_WORKSPACE}/lib
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE
    - name: Make Package
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cpack
    - name: Upload Artifact (All)
      uses: actions/upload-artifact@v2
      with:
        name: Packages-All (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Upload Artifact (build)
      uses: actions/upload-artifact@v2
      with:
        name: Packages-amd64 (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Upload to Release
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const root = '${{ runner.workspace }}/build/packages/';
          const path = require('path');
          const fs = require('fs');
          const release_id = '${{ needs.create_release.outputs.release_id }}';
          for (let file of await fs.readdirSync(root)) {
            if (path.extname(file) === '.deb') {
              console.log('uploadReleaseAsset', file);
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: file,
                data: await fs.readFileSync(`${root}/${file}`)
              });
            }
          }


  openwinch-armhf:
    name: OpenWinch - RaspberryPI (armhf)
    needs: create_release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install extra package
      run: |
        sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
        sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0xAB17C654
        sudo apt-get update
        sudo apt-get install python3-vcstool libsdl2-dev cppcheck googletest gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        cd /usr/src/googletest/
        sudo mkdir build
        cd build
        sudo cmake ..
        sudo make
        sudo make install
    - name: Add external libraries
      run: |
        vcs import ${GITHUB_WORKSPACE}/lib/ < ${GITHUB_WORKSPACE}/openwinch.repos
        cp -r ${GITHUB_WORKSPACE}/cmake/extra/* ${GITHUB_WORKSPACE}/lib
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake ${GITHUB_WORKSPACE} -DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/cmake/platforms/arm-gnueabihf.toolchain.cmake
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE
    - name: Make Package
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cpack
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Packages-All (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Upload Artifact (build)
      uses: actions/upload-artifact@v2
      with:
        name: Packages-armhf (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Upload to Release
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const root = '${{ runner.workspace }}/build/packages/';
          const path = require('path');
          const fs = require('fs');
          const release_id = '${{ needs.create_release.outputs.release_id }}';
          for (let file of await fs.readdirSync(root)) {
            if (path.extname(file) === '.deb') {
              console.log('uploadReleaseAsset', file);
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: file,
                data: await fs.readFileSync(`${root}/${file}`)
              });
            }
          }

  openwinch-arm64:
    name: OpenWinch - RaspberryPI4 (arm64)
    needs: create_release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install extra package
      run: |
        sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
        sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-key 0xAB17C654
        sudo apt-get update
        sudo apt-get install python3-vcstool libsdl2-dev cppcheck googletest gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        cd /usr/src/googletest/
        sudo mkdir build
        cd build
        sudo cmake ..
        sudo make
        sudo make install
    - name: Add external libraries
      run: |
        vcs import ${GITHUB_WORKSPACE}/lib/ < ${GITHUB_WORKSPACE}/openwinch.repos
        cp -r ${GITHUB_WORKSPACE}/cmake/extra/* ${GITHUB_WORKSPACE}/lib
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake ${GITHUB_WORKSPACE} -DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/cmake/platforms/arm-gnuaarch64.toolchain.cmake
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE
    - name: Make Package
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cpack
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Packages-All (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Upload Artifact (build)
      uses: actions/upload-artifact@v2
      with:
        name: Packages-arm64 (DEB)
        path: ${{runner.workspace}}/build/packages/*.deb
    - name: Upload to Release
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const root = '${{ runner.workspace }}/build/packages/';
          const path = require('path');
          const fs = require('fs');
          const release_id = '${{ needs.create_release.outputs.release_id }}';
          for (let file of await fs.readdirSync(root)) {
            if (path.extname(file) === '.deb') {
              console.log('uploadReleaseAsset', file);
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: file,
                data: await fs.readFileSync(`${root}/${file}`)
              });
            }
          }
